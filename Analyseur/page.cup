package compiler;

import ui.Node;

parser code {:
    
   public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    
	private SQLContext context;
    public void setContext (SQLContext context) {
    	this.context = context;
    }

    public SQLContext getContext () {
		return context;
    }

	public SQLFactory getFactory () {
		return getContext().getFactory();
	}

:}

terminal TERM, SEP;
terminal SELECT, FROM, WHERE, CREATE_TABLE, DELETE, UPDATE, TABLE, SET, PRIMARY_KEY, INSERT_INTO, VALUES;
terminal Integer NUMBER;
terminal String ID;
terminal OPEN_PARENTHESIS, CLOSE_PARENTHESIS, QUOTE, EQUAL;
terminal NOT_NULL;
terminal INT, VARCHAR;
terminal WILDCARD;

nonterminal Node    Commandes, Instruction, Instructions;
nonterminal Node 	Expression;
nonterminal Node	Columns, Column;
nonterminal Node	Table;
nonterminal Node	WhereOpt, Where;
nonterminal Node	Condition;
nonterminal Node	Set;
nonterminal Node	Datas, Data, Type, Null;
nonterminal Node	Values, Value, Val;

 
Commandes	::= Instructions 
         	;

Instructions	::= 
            	|	Instructions:l Instruction:i TERM
            	;

Instruction ::=	CREATE_TABLE Table:t OPEN_PARENTHESIS Datas:d SEP PRIMARY_KEY Column:n CLOSE_PARENTHESIS
			|	DELETE FROM Table:t Where:w
			|	UPDATE Table:t Set:s Where:w
			|	INSERT_INTO Table:t OPEN_PARENTHESIS Columns:cols CLOSE_PARENTHESIS Values
			| 	SELECT Columns:cols FROM Table:t WhereOpt:w
			|	SELECT WILDCARD FROM Table:t WhereOpt:w
			;
			
Columns	::= Column:n
     	|	Columns:ns SEP Column:n
     	;
		
Column	::=	ID
    	;
		
Table	::=	ID
     	;
		
WhereOpt	::=	
        	|	Where:w
        	;

Where	::=	WHERE Condition:c
     	;
		
Condition	::=	
         	;
         	
Set		::= SET Column:c EQUAL QUOTE Val:v QUOTE
		;
		
Datas	::= Data:d
     	|	Datas:ds SEP Data:d
     	;
		
Data	::=	Column:c Type:t Null:e
    	;
    	
Type 	::= INT
		| VARCHAR OPEN_PARENTHESIS NUMBER CLOSE_PARENTHESIS
		;
		
Null	::=
		| NOT_NULL
		;
		
Values 	::=	VALUES OPEN_PARENTHESIS Value:vs CLOSE_PARENTHESIS
		;

Value	::=	QUOTE Val QUOTE
		|	Value:vs SEP QUOTE Val:v QUOTE
		;
		
Val		::= NUMBER
		| ID
		;