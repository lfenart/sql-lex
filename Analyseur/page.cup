package compiler;

import ui.Node;

parser code {:
    
   public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    
	private SQLContext context;
    public void setContext (SQLContext context) {
    	this.context = context;
    }

    public SQLContext getContext () {
		return context;
    }

	public SQLFactory getFactory () {
		return getContext().getFactory();
	}

:}

terminal TERM, SEP;
terminal SELECT, FROM, WHERE, CREATE, TABLE, DELETE, UPDATE, SET, PRIMARY, KEY, INSERT, INTO, VALUES;
terminal Integer NUMBER;
terminal String ID;
terminal OPEN_PARENTHESIS, CLOSE_PARENTHESIS, QUOTE, EQUAL;
terminal NOT, NULL;
terminal INT, VARCHAR;
terminal WILDCARD;
terminal ORDER, GROUP, BY, ASC, DESC;
terminal DROP;

nonterminal Node  Commandes, Instruction, Instructions;
nonterminal Node 	Expression;
nonterminal Node	Columns, Column;
nonterminal Node	Table;
nonterminal Node	WhereOpt, Where;
nonterminal Node	GroupByOpt, GroupBy;
nonterminal Node	OrderByOpt, OrderBy, Order;
nonterminal Node	Condition;
nonterminal Node	Set;
nonterminal Node	Datas, Data, Type, NotOpt, NullOpt;
nonterminal Node	Values, Value, Val;
nonterminal Node	PrimaryKeyOpt;
 
Commandes	::= Instructions 
         	;

Instructions	::= 
            	|	Instructions:l Instruction:i TERM
            	;

Instruction ::=	CREATE TABLE Table:t OPEN_PARENTHESIS Datas:d PrimaryKeyOpt CLOSE_PARENTHESIS
			|	DELETE FROM Table:t Where:w
			|	UPDATE Table:t Set:s Where:w
			|	INSERT INTO Table:t OPEN_PARENTHESIS Columns:cols CLOSE_PARENTHESIS Values
			| 	SELECT Columns:cols FROM Table:t WhereOpt:w  GroupByOpt:g OrderByOpt:o 
			|	SELECT WILDCARD FROM Table:t WhereOpt:w  GroupByOpt:g OrderByOpt:o 
			|	DROP TABLE Table:t
			;
			
Columns	::= Column:n
     	|	Columns:ns SEP Column:n
     	;
		
Column	::=	ID
    	;
		
Table	::=	ID
     	;
     	
PrimaryKey ::= 
			| SEP PRIMARY KEY OPEN_PARENTHESIS Column:n CLOSE_PARENTHESIS
			;
		
WhereOpt	::=	
        	|	Where:w
        	;

Where	::=	WHERE Condition:c
     	;
     	
GroupByOpt	::=
			| GroupBy:g
			;

GroupBy ::= GROUP BY Column:c
		;
		
OrderByOpt	::=
			| OrderBy:o
			;

OrderBy ::= ORDER BY Column:c Order:o
		;
		
		
Order ::= 
		| ASC
		| DESC
		;
		
Condition	::=	Column:c EQUAL Val:v 
         	;
         	
Set		::= SET Column:c EQUAL Val:v
		;
		
Datas	::= Data:d
     	|	Datas:ds SEP Data:d
     	;
		
Data	::=	Column:c Type:t NullOpt:e
    	;
    	
Type 	::= INT
		| VARCHAR OPEN_PARENTHESIS NUMBER CLOSE_PARENTHESIS
		;
		
NullOpt	::= 
		|	NotOpt:n NULL
		;
		
NotOpt	::=	
		|	NOT
		;
		
Values 	::=	VALUES OPEN_PARENTHESIS Value:vs CLOSE_PARENTHESIS
		;

Value	::= Val:v
		|	Value:vs SEP Val:v
		;
		
Val		::= NUMBER
		| QUOTE ID QUOTE
		;

PrimaryKeyOpt	::= 
				| SEP PRIMARY KEY OPEN_PARENTHESIS Column:n CLOSE_PARENTHESIS
				;
