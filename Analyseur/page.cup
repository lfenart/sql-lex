package compiler;

import Instruction.DataType;
import Instruction.JoinType;
import Instruction.Node;
import Instruction.Operator;
import Instruction.Order;

parser code {:

   public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

	private SQLContext context;
    public void setContext (SQLContext context) {
    	this.context = context;
    }

    public SQLContext getContext () {
		return context;
    }

	public SQLFactory getFactory () {
		return getContext().getFactory();
	}

:}

terminal TERM, SEP, POINT;
terminal SELECT, FROM, WHERE, CREATE, TABLE, DELETE, UPDATE, SET, PRIMARY, KEY, INSERT, INTO, VALUES;
terminal Long INTEGER;
terminal Double DOUBLE;
terminal String ID;
terminal String	TEXT;
terminal OPEN_PARENTHESIS, CLOSE_PARENTHESIS;
terminal NOT, NULL;
terminal INT, VARCHAR, BIGINT, BIT, TINYINT, SMALLINT, FLOAT, REAL, MONEY, DATE, TIME, CHAR;
terminal ORDER, GROUP, BY, ASC, DESC;
terminal DROP;
terminal OR, AND;
terminal NOT_EQ, EQUAL, LESS, GREATER, LESS_OR_EQ, GREATER_OR_EQ;
terminal CONCAT;
terminal PLUS, MINUS, MULT, DIV, UMINUS, UPLUS;
terminal TRUE, FALSE;
terminal NULLS, FIRST, LAST;
terminal INNER, CROSS, LEFT, RIGHT, FULL, SELF, NATURAL, UNION;
terminal JOIN;
terminal ON;
terminal USING;
terminal AS;

nonterminal Node	Commandes, Instruction, Instructions;
nonterminal Node	CreateInstruction, DropInstruction;
nonterminal Node	DeleteInstruction, InsertInstruction, SelectInstruction, UpdateInstruction;
nonterminal Node	AndCondition, Condition, Operand, Summand, Factor, Term;
nonterminal Node	AsColumn, AsColumnOpt;
nonterminal Node	Column, Columns;
nonterminal Node	ColumnName, TableAlias, ColumnAlias;
nonterminal Node	Data, Datas, DataType;
nonterminal Node 	Expression, Expressions;
nonterminal Node	From, Into;
nonterminal Node	Function;
nonterminal Node	GroupBy, GroupByOpt;
nonterminal Node	Join, JoinOpt, JoinSpecification;
nonterminal Node	NotOpt, NullOpt;
nonterminal Node	Nulls, NullsOpt;
nonterminal Node	Number;
nonterminal Node	Order, OrderOpt, OrderBy, OrderBys, OrderBysOpt;
nonterminal Node	PrimaryKey, PrimaryKeyOpt;
nonterminal Node	Select, SelectExpression, SelectExpressions;
nonterminal Node	Set, Sets;
nonterminal Node	Table, Tables, TableExpression;
nonterminal Node	Value;
nonterminal Node	Values;
nonterminal Node	Where, WhereOpt;

nonterminal Node	AsTableOpt;

nonterminal JoinType	JoinType;
nonterminal Operator	Compare;

precedence left OR;
precedence left AND;
precedence left NOT_EQ, EQUAL, LESS, GREATER, LESS_OR_EQ, GREATER_OR_EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left CONCAT;
precedence right UMINUS;
precedence right NOT;

Commandes	::= Instructions
         	;

Instructions	::=
            	|	Instructions Instruction:i TERM	{: getContext().addInstruction(i); :}
            	;

Instruction ::=	CreateInstruction:c	{: RESULT = c; :}
			|	DeleteInstruction:d	{: RESULT = d; :}
			|	DropInstruction:d	{: RESULT = d; :}
			|	InsertInstruction:i	{: RESULT = i; :}
			|	SelectInstruction:s	{: RESULT = s; :}
			|	UpdateInstruction:u	{: RESULT = u; :}
			;

CreateInstruction	::=	CREATE TABLE Table:t OPEN_PARENTHESIS Datas:d PrimaryKeyOpt:p CLOSE_PARENTHESIS
						{:
							RESULT = getFactory().createNodeCreate(t, d, p);
						:}
					;

DeleteInstruction	::=	DELETE From:f WhereOpt:w
						{:
							RESULT = getFactory().createNodeDelete(f, w);
						:}
					;

DropInstruction	::=	DROP TABLE Tables:ts
					{:
						RESULT = getFactory().createNodeDrop(ts);
					:}
				;

InsertInstruction	::=	INSERT Into:i OPEN_PARENTHESIS Columns:cs CLOSE_PARENTHESIS Values:vs
						{:
							RESULT = getFactory().createNodeInsert(i, cs, vs);
						:}
					;

SelectInstruction	::=	Select:s From:f WhereOpt:w GroupByOpt:g OrderBysOpt:o
						{:
							RESULT = getFactory().createNodeSelect(s, f, w, g, o);
						:}
					;

UpdateInstruction	::=	UPDATE Table:t SET Sets:s WhereOpt:w
						{:
							RESULT = getFactory().createNodeUpdate(t, s, w);
						:}
					;

AndCondition	::=	Condition:c						{: RESULT = c; :}
				|	AndCondition:e AND Condition:c
					{:
						RESULT = getFactory().createNodeOperator(Operator.AND);
						RESULT.getChildren().add(e);
						RESULT.getChildren().add(c);
					:}
         		;

AsColumn	::=	AS ColumnAlias:alias	{: RESULT = getFactory().createNodeAs(alias); :}
	;

AsColumnOpt	::=
		|	AsColumn:a	{: RESULT = a; :}
		;

Column	::=	ColumnName:name	{: RESULT = getFactory().createNodeColumn(name, null); :}
		|	TableAlias:alias POINT ColumnName:name
			{:
				RESULT = getFactory().createNodeColumn(name, alias);
			:}
		;

Columns	::= Column:n
			{:
				RESULT = getFactory().createNodeBlock();
				RESULT.getChildren().add(n);
			:}
     	|	Columns:ns SEP Column:n	{: RESULT = ns; ns.getChildren().add(n); :}
     	;

ColumnAlias	::=	ID:name
				{:
					RESULT = getFactory().createNodeColumnAlias(
						getFactory().createNodeText(name)
					);
				:}
			;

ColumnName	::=	ID:name
				{:
					RESULT = getFactory().createNodeColumnName(
						getFactory().createNodeText(name)
					);
				:}
			;

Compare	::=	NOT_EQ			{: RESULT = Operator.NOT_EQ; :}
		|	EQUAL			{: RESULT = Operator.EQUAL; :}
		|	LESS_OR_EQ		{: RESULT = Operator.LESS_OR_EQ; :}
		|	GREATER_OR_EQ	{: RESULT = Operator.GREATER_OR_EQ; :}
		|	LESS			{: RESULT = Operator.LESS; :}
		|	GREATER			{: RESULT = Operator.GREATER; :}
		;

Condition	::=	Operand:o	{: RESULT = o; :}
			|	Operand:o1 Compare:cmp Operand:o2
				{:
					RESULT = getFactory().createNodeOperator(cmp);
					RESULT.getChildren().add(o1);
					RESULT.getChildren().add(o2);
				:}
			|	NOT Expression:e	{: RESULT = getFactory().createNodeNot(); RESULT.getChildren().add(e); :}
			;

Data	::=	Column:c DataType:t NullOpt:e	{: RESULT = getFactory().createNodeData(c, t, e); :}
    	;

Datas	::= Data:d				{: RESULT = getFactory().createNodeBlock(); RESULT.getChildren().add(d); :}
     	|	Datas:ds SEP Data:d	{: RESULT = ds; ds.getChildren().add(d); :}
     	;

DataType 	::= INT			{: RESULT = getFactory().createNodeType(DataType.INT); :}
		| 	SMALLINT	{: RESULT = getFactory().createNodeType(DataType.SMALLINT); :}
		| 	TINYINT		{: RESULT = getFactory().createNodeType(DataType.TINYINT); :}
		| 	BIGINT		{: RESULT = getFactory().createNodeType(DataType.BIGINT); :}
		| 	FLOAT		{: RESULT = getFactory().createNodeType(DataType.FLOAT); :}
		| 	REAL		{: RESULT = getFactory().createNodeType(DataType.REAL); :}
		| 	MONEY		{: RESULT = getFactory().createNodeType(DataType.MONEY); :}
		| 	DATE		{: RESULT = getFactory().createNodeType(DataType.DATE); :}
		| 	TIME		{: RESULT = getFactory().createNodeType(DataType.TIME); :}
		| 	BIT			{: RESULT = getFactory().createNodeType(DataType.BIT); :}
		| 	CHAR OPEN_PARENTHESIS INTEGER:n CLOSE_PARENTHESIS		{: RESULT = getFactory().createNodeType(DataType.CHAR,n); :}
		|	VARCHAR OPEN_PARENTHESIS INTEGER:n CLOSE_PARENTHESIS	{: RESULT = getFactory().createNodeType(DataType.VARCHAR, n); :}
		;

Expressions	::=	Expression:e	{: RESULT = getFactory().createNodeBlock(); RESULT.getChildren().add(e); :}
			|	Expressions:es SEP Expression:e	{: RESULT = es; es.getChildren().add(e); :}
			;

Expression	::=	AndCondition:c					{: RESULT = c; :}
			|	Expression:e OR AndCondition:c
				{:
					RESULT = getFactory().createNodeOperator(Operator.OR);
					RESULT.getChildren().add(e);
					RESULT.getChildren().add(c);
				:}
         	;

Factor	::=	Term:t					{: RESULT = t; :}
		|	Factor:f MULT Term:t	{: RESULT = getFactory().createNodeMult(f, t); :}
		|	Factor:f DIV Term:t		{: RESULT = getFactory().createNodeDiv(f, t); :}
		;

From	::=	FROM TableExpression:t AsTableOpt:a{: RESULT = getFactory().createNodeFrom(t,a); :}
		;

Function	::= ID:name OPEN_PARENTHESIS Column:c CLOSE_PARENTHESIS
				{:
					RESULT = getFactory().createNodeFunction(name);
					RESULT.getChildren().add(c);
				:}
			;

Into	::=	INTO Table:name
			{:
				RESULT = getFactory().createNodeInto(name);
			:}
		;

GroupBy	::= GROUP BY Expressions:es	{: RESULT = getFactory().createNodeGroup(es); :}
		;

GroupByOpt	::=
			| GroupBy:g	{: RESULT = g; :}
			;

Join		::= JoinType:t JOIN TableExpression:e JoinSpecification:s
				{:
					RESULT = getFactory().createNodeJoin(t, e, s);
				:}
			;

JoinOpt		::=
			|	Join:j	{: RESULT = j; :}
			;

JoinSpecification	::=	ON Expression:e	{: RESULT = getFactory().createNodeOn(e); :}
					|	USING OPEN_PARENTHESIS Columns:cs CLOSE_PARENTHESIS
						{:
							RESULT = getFactory().createNodeUsing(cs);
						:}
					;

JoinType	::=
			|	INNER	{: RESULT = JoinType.INNER; :}
			|	CROSS	{: RESULT = JoinType.CROSS; :}
			|	LEFT	{: RESULT = JoinType.LEFT; :}
			|	RIGHT	{: RESULT = JoinType.RIGHT; :}
			|	FULL	{: RESULT = JoinType.FULL; :}
			|	SELF	{: RESULT = JoinType.SELF; :}
			|	NATURAL	{: RESULT = JoinType.NATURAL; :}
			|	UNION	{: RESULT = JoinType.UNION; :}
			;

NotOpt	::=
		|	NOT	{: RESULT = getFactory().createNodeNot(); :}
		;

NullOpt	::=
		|	NotOpt:n NULL
			{:
				if (n == null) {
					RESULT = getFactory().createNodeNull();
				} else {
					RESULT = n;
					n.getChildren().add(getFactory().createNodeNull());
				}
			:}
		;

Nulls	::=	NULLS FIRST
		|	NULLS LAST
		;

NullsOpt	::=
			|	Nulls:n	{: RESULT = n; :}
			;

Number	::=	INTEGER:n	{: RESULT = getFactory().createNodeInteger(n); :}
		|	DOUBLE:n	{: RESULT = getFactory().createNodeDouble(n); :}
		;

Operand	::=	Summand:s					{: RESULT = s; :}
		|	Operand:o CONCAT Summand:s	{: RESULT = getFactory().createNodeConcat(o, s); :}
		;

Order	::=	ASC		{: RESULT = getFactory().createNodeOrder(Order.ASC); :}
		|	DESC	{: RESULT = getFactory().createNodeOrder(Order.DESC); :}
		;

OrderOpt	::=
			|	Order:o	{: RESULT = o; :}
			;

OrderBy	::=	Expression:e OrderOpt:o NullsOpt:n	{: RESULT = getFactory().createNodeOrderBy(e, o, n); :}
		;

OrderBys	::=	OrderBy:o	{: RESULT = getFactory().createNodeBlock(); RESULT.getChildren().add(o); :}
			|	OrderBys:os SEP OrderBy:o	{: RESULT = os; os.getChildren().add(o); :}
			;

OrderBysOpt	::=
			|	ORDER BY OrderBys:os	{: RESULT = os; :}
			;

PrimaryKey	::=	SEP PRIMARY KEY OPEN_PARENTHESIS Column:n CLOSE_PARENTHESIS
				{:
					RESULT = getFactory().createNodePrimaryKey(n);
				:}
			;

PrimaryKeyOpt	::=
				|	PrimaryKey:k	{: RESULT = k; :}
				;

Select	::=	SELECT MULT /* hack: wildcard */
			{:
				RESULT = getFactory().createNodeSelectExpression(
					getFactory().createNodeWildcard(), null
				);
			:}
		|	SELECT SelectExpressions:es	{: RESULT = es; :}
		;

SelectExpression	::=	Expression:e AsColumnOpt:a
						{:
							RESULT = getFactory().createNodeSelectExpression(e, a);
						:}
					;

SelectExpressions	::=	SelectExpression:e
						{:
							RESULT = getFactory().createNodeBlock();
							RESULT.getChildren().add(e);
						:}
					|	SelectExpressions:es SEP SelectExpression:e
						{:
							RESULT = es;
							es.getChildren().add(e);
						:}
					;

Set		::= Column:c EQUAL Expression:e	{: RESULT = getFactory().createNodeSet(c, e); :}
		;

Sets	::=	Set:s	{: RESULT = getFactory().createNodeBlock(); RESULT.getChildren().add(s); :}
		|	Sets:ss SEP Set:s	{: RESULT = ss; ss.getChildren().add(s); :}
		;

Summand	::=	Factor:f					{: RESULT = f; :}
		|	Summand:s PLUS Factor:f		{: RESULT = getFactory().createNodePlus(s, f); :}
		|	Summand:s MINUS Factor:f	{: RESULT = getFactory().createNodeMinus(s, f); :}
		;

Table	::=	ID:name	{: RESULT = getFactory().createNodeTable(getFactory().createNodeText(name)); :}
		;

Tables	::=	Table:t				{: RESULT = getFactory().createNodeBlock(); RESULT.getChildren().add(t); :}
		|	Tables:ts Table:t	{: RESULT = ts; ts.getChildren().add(t); :}
		;

TableAlias	::=	ID:alias	{: RESULT = getFactory().createNodeTableAlias(getFactory().createNodeText(alias)); :}
			;

TableExpression	::=	ID:name AsTableOpt:alias JoinOpt:j  {: RESULT = getFactory().createNodeTableExpression(name, alias, j); :}
     			;
     			
AsTableOpt	::=
			|	AS Table:t	{: RESULT = getFactory().createNodeAs(t); :}
			;

Term	::= Value:v		{: RESULT = v; :}
		|	Column:c	{: RESULT = c; :}
		|	OPEN_PARENTHESIS Expression:e CLOSE_PARENTHESIS	{: RESULT = e; :}
		|	Function:f	{: RESULT = f; :}
		|	MINUS Term:t	{: RESULT = getFactory().createNodeUminus(t); :}	%prec UMINUS
		|	PLUS Term:t	{: RESULT = getFactory().createNodeUplus(t); :}	%prec UPLUS
		;

Value	::= TEXT:t		{: RESULT = getFactory().createNodeText(t); :}
		|	Number:n	{: RESULT = n; :}
		|	TRUE		{: RESULT = getFactory().createNodeBoolean(true); :}
		|	FALSE		{: RESULT = getFactory().createNodeBoolean(false); :}
		|	NULL		{: RESULT = getFactory().createNodeNull(); :}
		;

Values	::=	VALUES OPEN_PARENTHESIS Expressions:es CLOSE_PARENTHESIS	{: RESULT = getFactory().createNodeValues(es); :}
		;

Where	::=	WHERE Expression:c	{: RESULT = getFactory().createNodeWhere(c); :}
     	;

WhereOpt	::=
        	|	Where:w	{: RESULT = w; :}
        	;