package compiler;

import ui.Node;

parser code {:

   public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

	private SQLContext context;
    public void setContext (SQLContext context) {
    	this.context = context;
    }

    public SQLContext getContext () {
		return context;
    }

	public SQLFactory getFactory () {
		return getContext().getFactory();
	}

:}

terminal TERM, SEP;
terminal SELECT, SELECT_ALL, FROM, WHERE, CREATE, TABLE, DELETE, UPDATE, SET, PRIMARY, KEY, INSERT, INTO, VALUES;
terminal Integer NUMBER;
terminal String ID;
terminal String	TEXT;
terminal OPEN_PARENTHESIS, CLOSE_PARENTHESIS, QUOTE;
terminal NOT, NULL;
terminal INT, VARCHAR;
terminal WILDCARD;
terminal ORDER, GROUP, BY, ASC, DESC;
terminal DROP;
terminal OR, AND;
terminal NOT_EQ, EQUAL, LESS, GREATER, LESS_OR_EQ, GREATER_OR_EQ;
terminal CONCAT;
terminal PLUS, MINUS, MULT, DIV;
terminal TRUE, FALSE;
terminal DOT;

nonterminal Node	Commandes, Instruction, Instructions;
nonterminal Node 	Expression;
nonterminal Node	Columns, Column;
nonterminal Node	Table;
nonterminal Node	WhereOpt, Where;
nonterminal Node	GroupByOpt, GroupBy;
nonterminal Node	OrderByOpt, OrderBy, Order;
nonterminal Node	Set;
nonterminal Node	Datas, Data, Type, NotOpt, NullOpt;
nonterminal Node	Values, Value, Numeric;
nonterminal Node	PrimaryKeyOpt;
nonterminal Node	AndCondition, OrCondition, Condition, Operand, Summand, Compare, Factor, Term;
nonterminal Node	UminusOpt;


Commandes	::= Instructions 
         	;

Instructions	::=
            	|	Instructions:l Instruction:i TERM {: getContext().addInstruction(i); :}
            	;

Instruction ::=	CREATE TABLE Table:t OPEN_PARENTHESIS Datas:d PrimaryKeyOpt CLOSE_PARENTHESIS
			|	DELETE FROM Table:t WhereOpt:w
			|	UPDATE Table:t Set:s Where:w
			|	INSERT INTO Table:t OPEN_PARENTHESIS Columns:cols CLOSE_PARENTHESIS VALUES OPEN_PARENTHESIS Values CLOSE_PARENTHESIS
			| 	SELECT Columns:cols FROM Table:t WhereOpt:w  GroupByOpt:g OrderByOpt:o 
			|	SELECT_ALL FROM Table:t WhereOpt:w  GroupByOpt:g OrderByOpt:o 
			|	DROP TABLE Table:t
			;

Columns	::= Column:n
     	|	Columns:ns SEP Column:n
     	;

Column	::=	ID
    	;

Table	::=	ID
     	;

PrimaryKey ::=
			| SEP PRIMARY KEY OPEN_PARENTHESIS Column:n CLOSE_PARENTHESIS
			;

WhereOpt	::=
        	|	Where:w
        	;

Where	::=	WHERE Expression:c
     	;

GroupByOpt	::=
			| GroupBy:g
			;

GroupBy ::= GROUP BY Column:c
		;

OrderByOpt	::=
			| OrderBy:o
			;

OrderBy ::= ORDER BY Column:c Order:o
		;


Order ::=
		| ASC
		| DESC
		;
		
Expression	::=	AndCondition:c
			|	Expression:e OR AndCondition:c
         	;
         	
AndCondition	::=	Condition:c
				|	AndCondition:e AND Condition:c
         		;
         		
Condition	::=	Operand:o
			|	Operand:o1 Compare:cmp Operand:o2
			|	NOT Expression:e
			|	OPEN_PARENTHESIS Expression:e CLOSE_PARENTHESIS
			;
			
Compare	::=	NOT_EQ
		|	EQUAL
		|	LESS_OR_EQ
		|	GREATER_OR_EQ
		|	LESS
		|	GREATER
		;
		
Operand	::=	Summand:s
		|	Operand:o CONCAT Summand:s
		;
		
Summand	::=	Factor:f
		|	Summand:s PLUS Factor:f
		|	Summand:s MINUS Factor:f
		;

Factor	::=	Term:t
		|	Factor:f MULT Term:t
		|	Factor:f DIV Term:t
		;
		
Term	::= Value:v
		|	Column:c
		;

Set		::= SET Column:c EQUAL Value:v
		;

Datas	::= Data:d
     	|	Datas:ds SEP Data:d
     	;

Data	::=	Column:c Type:t NullOpt:e
    	;

Type 	::= INT
		| VARCHAR OPEN_PARENTHESIS NUMBER CLOSE_PARENTHESIS
		;

NullOpt	::=
		|	NotOpt:n NULL
		;

NotOpt	::=
		|	NOT
		;


Values	::= Value:v
		|	Values:vs SEP Value:v
		;
		
Value	::= TEXT:txt {: RESULT = getFactory().createNodeText (txt); :}
		|	Numeric:num {: RESULT = getFactory().createNodeNumeric (num); :}
		|	TRUE {: RESULT = getFactory().createNodeBoolean (true); :}
		|	FALSE {: RESULT = getFactory().createNodeBoolean (false); :}
		|	NULL {: RESULT = getFactory().createNodeNull (); :}
		;
		
Numeric	::=	UminusOpt NUMBER
		|	UminusOpt NUMBER DOT NUMBER
		;

UminusOpt	::=	
			|	MINUS
			;

PrimaryKeyOpt	::= 
				| SEP PRIMARY KEY OPEN_PARENTHESIS Column:n CLOSE_PARENTHESIS
				;
